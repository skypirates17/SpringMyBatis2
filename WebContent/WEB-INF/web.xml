<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xml>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee         http://java.sun.com/xml/ns/javaee"
	xmlns:web="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	id="WebApp_ID" version="3.0">
	
	<!-- General description of your web application -->
	<display-name>Spring MyBatis part 2</display-name>
	<description>Basic Sample of Spring MyBatis part 2</description>
	
	<!-- 
		Servlet definitions for the servlets that make up your web application, 
		including initialization parameters. 
		
		@load-on-startup element indicates that this servlet should be loaded 
		(instantiated and have its init() called) on the startup of the web application (time of deployment). 
		The optional contents of these element must be an integer indicating the order in which 
		the servlet should be loaded. If the value is a negative integer, or the element is not present, 
		the container is free to load the servlet whenever it chooses , or will be loaded at request time, at first request.
		If the value is a positive 128 integer or 0, the container must load and 
		initialize the servlet as the application is deployed. The container must guarantee that 
		servlets marked with lower integers are loaded before servlets marked with higher integers. 
		The container may choose the order of loading of servlets with the same load-on-start-up value.
		
		@init-param is defined inside a servlet element based on the sample servlet below. 
		This means it is only available to the servlet under declaration and not to other parts of the web application. 
		If you want this parameter to be available to other parts of the application say a JSP this needs to be 
		explicitly passed to the JSP. For instance passed as request.setAttribute(). 
		This is highly inefficient and difficult to code.

		So if you want to get access to global values from anywhere within the application without 
		explicitly passing those values, you need to use Context Init parameters.
	-->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				/WEB-INF/classes/dispatcher-servlet.xml
				/WEB-INF/classes/database-config.xml
				/WEB-INF/classes/mapper-config.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- 
		Define mappings that are used by the servlet container to translate 
		a particular request URI (context-relative) to a particular servlet 
	-->
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.htm</url-pattern>
	</servlet-mapping>

	<!-- 
		The optional welcome-file-list element contains an ordered list of welcome-file elements.
		When the URL request is a directory name, Server serves the first file specified in this element. 
		If that file is not found, the server then tries the next file in the list.
	 -->
	<welcome-file-list>
		<welcome-file>index.htm</welcome-file>
	</welcome-file-list>
</web-app>