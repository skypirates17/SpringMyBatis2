<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 
		This is used to locate the view page. It allows us to set properties 
		such as prefix or suffix to the view name to generate the final view page 
	-->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 
		This Component scanning is telling spring that it should search the class path 
		for all the classes under your <base-package> and look at each class 
		to see if it has a @Controller, or @Repository, or @Service, or @Component 
		and if it does then Spring will register the class with the bean factory 
		as if you had typed <bean class="..." /> in the xml configuration files.
	 -->
	<context:component-scan base-package="com.acss" />
	
	<!-- 
		<mvc:annotation-driven /> means that you can define spring beans dependencies without 
		actually having to specify a bunch of elements in xml or implement an 
		interface or extend a base class. For example @Repository to tell spring that 
		a class is a Dao without having to extend JpaDaoSupport or some other subclass of DaoSupport.
		
		If you don't include mvc:annotation-driven also your MVC application would 
		work if you have used the context:component-scan for creating the beans or 
		defined the beans in your XML file
	-->
	<mvc:annotation-driven /> 
</beans>